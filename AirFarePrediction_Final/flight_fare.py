# -*- coding: utf-8 -*-
"""code.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15Yw2y0V0qdS_zptYLXbu6rD8RzSbzbGj
"""

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)
get_ipython().run_line_magic('matplotlib', 'inline')
import matplotlib.pyplot as plt  # Matlab-style plotting
import seaborn as sns
color = sns.color_palette()
sns.set_style('darkgrid')
from scipy import stats
from scipy.stats import norm, skew
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import KFold, cross_val_score
from sklearn.model_selection import cross_val_predict
from sklearn.preprocessing import RobustScaler
from sklearn.pipeline import make_pipeline
from sklearn.linear_model import RidgeCV
from sklearn.linear_model import LassoCV
from sklearn.linear_model import ElasticNetCV
from lightgbm import LGBMRegressor

import datetime as dt

big_df =  pd.read_csv('input/data_new.csv')
#test_df=pd.read_excel('Test_set.xlsx')

#big_df = train_df.append(test_df)

big_df.dtypes

big_df['Date'] = big_df['Dept_Date'].str.split('/').str[0]
big_df['Month'] = big_df['Dept_Date'].str.split('/').str[1]
big_df['Year'] = big_df['Dept_Date'].str.split('/').str[2]

big_df["Dept_Date"] = big_df["Dept_Date"].apply(pd.to_datetime)

def weekDay(dayVal):
    day, month, year = (int(x) for x in dayVal.split('-'))    
    ans = dt.date(year, month, day).strftime("%a")
    return ans

big_df['Taken_Day'] = big_df['Taken'].apply(weekDay)

big_df["Taken"] = big_df["Taken"].apply(pd.to_datetime)

big_df['Days_To_Dept'] = (big_df['Dept_Date'] - big_df['Taken']).dt.days

big_df=big_df.drop(['Dept_Date'], axis=1)

big_df=big_df.drop(['Taken'], axis=1)

big_df['Date'] = big_df['Date'].astype(int)
big_df['Month'] = big_df['Month'].astype(int)
big_df['Year'] = big_df['Year'].astype(int)

big_df.info()

big_df['Arrival_Hour'] = big_df['Arr_Time'] .str.split(':').str[0]
big_df['Arrival_Minute'] = big_df['Arr_Time'] .str.split(':').str[1]
big_df['Arrival_Hour'] = pd.to_numeric(big_df['Arrival_Hour'], errors='coerce')
big_df= big_df.dropna(subset=['Arrival_Hour'])

big_df['Arrival_Hour'] = big_df['Arrival_Hour'].astype(int)
big_df['Arrival_Minute'] = big_df['Arrival_Minute'].astype(int)
big_df=big_df.drop(['Arr_Time'], axis=1)



big_df['Dep_Hour'] = big_df['Dept_Time'] .str.split(':').str[0]
big_df['Dep_Minute'] = big_df['Dept_Time'] .str.split(':').str[1]
big_df['Dep_Hour'] = pd.to_numeric(big_df['Dep_Hour'], errors='coerce')
big_df= big_df.dropna(subset=['Dep_Hour'])
big_df['Dep_Hour'] = big_df['Dep_Hour'].astype(int)
big_df['Dep_Minute'] = big_df['Dep_Minute'].astype(int)



big_df=big_df.drop(['Dept_Time'], axis=1)
#big_df['Dep_Hour'] = big_df['Dep_Hour'].astype(int)
#big_df['Dep_Minute'] = big_df['Dep_Minute'].astype(int)
#big_df=big_df.drop(['Dep_Time'], axis=1)


# In[94]:


#big_df['Route_1'] = big_df['Route'] .str.split('→ ').str[0]
#big_df['Route_2'] = big_df['Route'] .str.split('→ ').str[1]
#big_df['Route_3'] = big_df['Route'] .str.split('→ ').str[2]
#big_df['Route_4'] = big_df['Route'] .str.split('→ ').str[3]
#big_df['Route_5'] = big_df['Route'] .str.split('→ ').str[4]

big_df['Total_Fare'].fillna((big_df['Total_Fare'].mean()), inplace=True)


# In[96]:


#big_df['Route_1'].fillna("None",inplace = True)
#big_df['Route_2'].fillna("None",inplace = True)
#big_df['Route_3'].fillna("None",inplace = True)
#big_df['Route_4'].fillna("None",inplace = True)
#big_df['Route_5'].fillna("None",inplace = True)

big_df.describe()

#big_df=big_df.drop(['Route'], axis=1)
#big_df=big_df.drop(['Duration'], axis=1)
#big_df.info()

import re
def convertToDecimal(value):
    h, m = re.sub("\D"," ",value).split()
    return int(h)*60+int(m)

big_df.loc[:,'Duration'] = big_df.loc[:,'Duration'].apply(convertToDecimal)

#big_df['Session'] = pd.cut(big_df.Dep_Hour,[0,6,12,18,24],labels=['Night','Morning','Afternoon','Evening'])
def assign_session(val):
    if val > 0.0 and val <= 6.0:
        return 'Night'
    elif val > 6.0 and val <= 12.0:
        return 'Morning'
    elif val > 12.0 and val <= 18.0:
        return 'Afternoon'
    else:
        return 'Evening'

big_df['Session'] = big_df['Dep_Hour'].apply(assign_session)

big_df.info()

#big_df.head()

big_df.loc[:,'FlightGroup'] =big_df.loc[:,['Airways','Session']].astype(str).apply('_'.join,1)

from sklearn.preprocessing import LabelEncoder

lb_encode = LabelEncoder()
big_df["Hopping"] = lb_encode.fit_transform(big_df["Hopping"])
big_df["Airways"] = lb_encode.fit_transform(big_df["Airways"])
big_df["Destination"] = lb_encode.fit_transform(big_df["Destination"])
big_df["Origin"] = lb_encode.fit_transform(big_df["Origin"])
big_df["Session"] = lb_encode.fit_transform(big_df["Session"])
big_df["FlightGroup"] = lb_encode.fit_transform(big_df["FlightGroup"])
#big_df['Route_1']= lb_encode.fit_transform(big_df["Route_1"])
#big_df['Route_2']= lb_encode.fit_transform(big_df["Route_2"])
#big_df['Route_3']= lb_encode.fit_transform(big_df["Route_3"])
#big_df['Route_4']= lb_encode.fit_transform(big_df["Route_4"])
#big_df['Route_5']= lb_encode.fit_transform(big_df["Route_5"])

#big_df = big_df.drop(['Session'],axis=1)
big_df["Taken_Day"] = lb_encode.fit_transform(big_df["Taken_Day"])

big_df.head()

def missing_values_table(df):
        # Total missing values
        mis_val = df.isnull().sum()
        
        # Percentage of missing values
        mis_val_percent = 100 * df.isnull().sum() / len(df)
        
        # Make a table with the results
        mis_val_table = pd.concat([mis_val, mis_val_percent], axis=1)
        
        # Rename the columns
        mis_val_table_ren_columns = mis_val_table.rename(
        columns = {0 : 'Missing Values', 1 : '% of Total Values'})
        
        # Sort the table by percentage of missing descending
        mis_val_table_ren_columns = mis_val_table_ren_columns[
            mis_val_table_ren_columns.iloc[:,1] != 0].sort_values(
        '% of Total Values', ascending=False).round(1)
        
        # Print some summary information
        print ("Your selected dataframe has " + str(df.shape[1]) + " columns.\n"      
            "There are " + str(mis_val_table_ren_columns.shape[0]) +
              " columns that have missing values.")
        
        # Return the dataframe with missing information
        return mis_val_table_ren_columns

missing_values_table(big_df)

big_df.info()

big_df.drop(columns=['Base_Fare','Fuel_Fare'],axis=1,inplace=True)

big_df.info()



df_train = big_df[0:10683]
df_test = big_df[10683:]
df_test = df_test.drop(['Total_Fare'], axis =1)
df_train.info()

X = df_train.drop(axis=1,columns=['Class_Type','Flight Number','Flight Code','FlightID'])
y = df_train.Total_Fare

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=123)

from IPython.display import Image
from IPython.core.display import HTML 
Image(url = "http://i.imgur.com/QBuDOjs.jpg")

df_train.drop(axis=1,columns=['Class_Type','Flight Number','Flight Code','FlightID'],inplace=True)

# # LINEAR REGRESSION

# In[55]:


#Build our model method
lm = LinearRegression()


# In[119]:


#Build our cross validation method
kfolds = KFold(n_splits=50,shuffle=True, random_state=100)


# In[120]:


def cv_rmse(model):
    rmse = np.sqrt(-cross_val_score(model, X, y, 
                                   scoring="neg_mean_squared_error", 
                                   cv = kfolds))
    return(rmse)


# In[121]:


benchmark_model = make_pipeline(RobustScaler(),
                                lm).fit(X=X_train, y=y_train)
cv_rmse(benchmark_model).mean()

from sklearn.linear_model import RidgeCV

def ridge_selector(k):
    ridge_model = make_pipeline(RobustScaler(),
                                RidgeCV(alphas = [k],
                                        cv=kfolds)).fit(X_train, y_train)
    
    ridge_rmse = cv_rmse(ridge_model).mean()
    return(ridge_rmse)


# In[123]:


r_alphas = [.0001, .0003, .0005, .0007, .0009, 
          .01, 0.05, 0.1, 0.3, 1, 3, 5, 10, 15, 20, 30, 50, 60, 70, 80]

ridge_scores = []
for alpha in r_alphas:
    score = ridge_selector(alpha)
    ridge_scores.append(score)

plt.plot(r_alphas, ridge_scores, label='Ridge')
plt.legend('center')
plt.xlabel('alpha')
plt.ylabel('score')

ridge_score_table = pd.DataFrame(ridge_scores, r_alphas, columns=['RMSE'])
ridge_score_table

alphas_alt = [14.5, 14.6, 14.7, 14.8, 14.9, 15, 15.1, 15.2, 15.3, 15.4, 15.5]

ridge_model2 = make_pipeline(RobustScaler(),
                            RidgeCV(alphas = alphas_alt,
                                    cv=kfolds)).fit(X_train, y_train)

cv_rmse(ridge_model2).mean()

# # Lasso Regression

# In[125]:


alphas = [0.00005, 0.0001, 0.0003, 0.0005, 0.0007, 
          0.0009, 0.01]
alphas2 = [0.00005, 0.0001, 0.0002, 0.0003, 0.0004, 0.0005,
           0.0006, 0.0007, 0.0008]

lasso_model2 = make_pipeline(RobustScaler(),
                             LassoCV(max_iter=1e7,
                                    alphas = alphas2,
                                    random_state = 42)).fit(X_train, y_train)

scores = lasso_model2.steps[1][1].mse_path_

plt.plot(alphas2, scores, label='Lasso')
plt.legend(loc='center')
plt.xlabel('alpha')
plt.ylabel('RMSE')
plt.tight_layout()
plt.show()

cv_rmse(lasso_model2).mean()

e_alphas = [0.0001, 0.0002, 0.0003, 0.0004, 0.0005, 0.0006, 0.0007]
e_l1ratio = [0.8, 0.85, 0.9, 0.95, 0.99, 1]

elastic_cv = make_pipeline(RobustScaler(), 
                           ElasticNetCV(max_iter=1e7, alphas=e_alphas, 
                                        cv=kfolds, l1_ratio=e_l1ratio))

elastic_model3 = elastic_cv.fit(X_train, y_train)


# In[128]:


cv_rmse(elastic_model3).mean()

from sklearn.model_selection import GridSearchCV
from matplotlib.pylab import rcParams
rcParams['figure.figsize'] = 12, 4
get_ipython().run_line_magic('matplotlib', 'inline')
import xgboost as xgb
from xgboost import XGBRegressor

def modelfit(alg, dtrain, target, useTrainCV=True, 
             cv_folds=5, early_stopping_rounds=50):
    
    if useTrainCV:
        xgb_param = alg.get_xgb_params()
        xgtrain = xgb.DMatrix(dtrain.values, 
                              label=y.values)
        
        print("\nGetting Cross-validation result..")
        cvresult = xgb.cv(xgb_param, xgtrain, 
                          num_boost_round=alg.get_params()['n_estimators'], 
                          nfold=cv_folds,metrics='rmse', 
                          early_stopping_rounds=early_stopping_rounds,
                          verbose_eval = True)
        alg.set_params(n_estimators=cvresult.shape[0])
    
    #Fit the algorithm on the data
    print("\nFitting algorithm to data...")
    alg.fit(dtrain, target, eval_metric='rmse')
        
    #Predict training set:
    print("\nPredicting from training data...")
    dtrain_predictions = alg.predict(dtrain)
        
    #Print model report:
    print("\nModel Report")
    print("RMSE : %.4g" % np.sqrt(mean_squared_error(target.values,
                                             dtrain_predictions)))

xgb3 = XGBRegressor(learning_rate =0.1, n_estimators=200, max_depth=10,
                     min_child_weight=5 ,gamma=0, subsample=0.7,max_bin=20,
                     colsample_bytree=0.8,objective= 'reg:linear',
                     nthread=4,scale_pos_weight=1,seed=27, reg_alpha=0.00006)

xgb_fit = xgb3.fit(X_train, y_train)


# In[203]:


cv_rmse(xgb_fit).mean()

"""from sklearn import svm
svr_opt = svm.SVR(C = 100000, gamma = 1e-08)

svr_fit = svr_opt.fit(X_train, y_train)


# In[174]:


cv_rmse(svr_fit).mean()
"""



from lightgbm import LGBMRegressor

lgbm_model = LGBMRegressor(objective='regression',num_leaves=31,
                              learning_rate=0.1, n_estimators=200,
                              max_bin = 100, bagging_fraction = 0.8,
                              bagging_freq = 5, feature_fraction = 0.8,
                              feature_fraction_seed=9, bagging_seed=9,
                              min_data_in_leaf =20, min_sum_hessian_in_leaf = 11)
lgbm_fit = lgbm_model.fit(X_train, y_train)


# In[198]:


cv_rmse(lgbm_fit).mean()

from mlxtend.regressor import StackingCVRegressor
from sklearn.pipeline import make_pipeline

#setup models
ridge = make_pipeline(RobustScaler(), 
                      RidgeCV(alphas = alphas_alt, cv=kfolds))

lasso = make_pipeline(RobustScaler(),
                      LassoCV(max_iter=1e7, alphas = alphas2,
                              random_state = 42, cv=kfolds))

elasticnet = make_pipeline(RobustScaler(), 
                           ElasticNetCV(max_iter=1e7, alphas=e_alphas, 
                                        cv=kfolds, l1_ratio=e_l1ratio))

lightgbm = make_pipeline(RobustScaler(),
                        LGBMRegressor(objective='regression',num_leaves=31,
                              learning_rate=0.1, n_estimators=200,
                              max_bin = 100, bagging_fraction = 0.8,
                              bagging_freq = 5, feature_fraction = 0.8,
                              feature_fraction_seed=9, bagging_seed=9,
                              min_data_in_leaf =6, min_sum_hessian_in_leaf = 11))


xgboost = make_pipeline(RobustScaler(),
                        XGBRegressor(learning_rate =0.1, n_estimators=200, max_depth=10,
                     min_child_weight=5 ,gamma=0, subsample=0.7,
                     colsample_bytree=0.8,objective= 'reg:linear',
                     nthread=4,scale_pos_weight=1,seed=27, reg_alpha=0.00006))
 

#stack
stack_gen = StackingCVRegressor(regressors=(ridge, lasso, elasticnet, 
                                            xgboost, lightgbm), 
                               meta_regressor=xgboost,
                               use_features_in_secondary=True)



#prepare dataframes
stackX = np.array(X_train)
stacky = np.array(y_train)

stack_gen_model = stack_gen.fit(stackX, stacky)

#em_preds = elastic_model3.predict(X_test)
#lasso_preds = lasso_model2.predict(X_test)
#ridge_preds = ridge_model2.predict(X_test)
stack_gen_preds = stack_gen_model.predict(X_test)
#xgb_preds = xgb_fit.predict(X_test)
#lgbm_preds = lgbm_fit.predict(X_test)

from sklearn.metrics import mean_squared_error
from math import sqrt

rmse = np.sqrt(mean_squared_error(y_test, stack_gen_preds))
print("RMSE: %f" % (rmse))

abs_error = abs(stack_gen_preds - y_test)
print('Absolute Error',abs_error)
mabe = 100 * (abs_error / y_test)

accuracy = 100 - np.mean(mabe)
print('Accuracy:', round(accuracy, 2), '%.')

from sklearn.metrics import r2_score
print(r2_score(y_test,stack_gen_preds))

testval = X_test.iloc[0].to_frame().T
print(testval)

''' SAVING THE MODEL'''
rf_filename = 'model/our_model.pkl'
import pickle as pkl
pkl.dump(stack_gen_model, open(rf_filename, 'wb'))

loaded_stack = pkl.load(open(rf_filename, 'rb'))
print(loaded_stack.predict(testval))

big_df.to_csv('input/big_df.csv',index=False)

"""df_test_xgb = df_test[['Additional_Info', 'Airline', 'Destination', 'Source', 'Date', 'Month',
       'Year', 'Stop', 'Arrival_Hour', 'Arrival_Minute', 'Dep_Hour',
       'Dep_Minute', 'Route_1', 'Route_2', 'Route_3', 'Route_4', 'Route_5']]
preds_1 = stack_gen_model.predict(df_test_xgb)
df_test_xgb['Price'] = preds_1
df_test_xgb.to_csv('flight_price_5.csv')
"""



"""df_test_xgb = df_test[['Additional_Info', 'Airline', 'Destination', 'Source', 'Date', 'Month',
       'Year', 'Stop', 'Arrival_Hour', 'Arrival_Minute', 'Dep_Hour',
       'Dep_Minute', 'Route_1', 'Route_2', 'Route_3', 'Route_4', 'Route_5']]
preds_1 = xgb_fit.predict(df_test_xgb)
df_test_xgb['Price'] = preds_1
df_test_xgb.to_csv('flight_price_10.csv')
"""



